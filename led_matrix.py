import time
import tm1640
import machine

class Image:
    HEART = [0x00,0x00,0x00,0x0c,0x1e,0x3e,0x7e,0xfc, 0xfc,0x7e,0x3e,0x1e,0x0c,0x00,0x00,0x00]
    SMILE = [0x00,0x00,0x00,0x3c,0x42,0x91,0xa5,0xa1, 0xa1,0xa5,0x91,0x42,0x3c,0x00,0x00,0x00]
    SAD = [0x00,0x00,0x00,0x3c,0x42,0x81,0xa5,0x91, 0x91,0xa5,0x81,0x42,0x3c,0x00,0x00,0x00]
    CONFUSED = [0x00,0x00,0x00,0x3c,0x42,0x91,0xa5,0x91, 0x91,0xa5,0x91,0x42,0x3c,0x00,0x00,0x00]
    ARROW_N = [0x00,0x00,0x00,0x00,0x08,0x0c,0x06,0xff, 0xff,0x06,0x0c,0x08,0x00,0x00,0x00,0x00]
    ARROW_E = [0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x18, 0xdb,0x7e,0x3c,0x18,0x00,0x00,0x00,0x00]
    ARROW_S = [0x00,0x00,0x00,0x00,0x10,0x30,0x60,0xff, 0xff,0x60,0x30,0x10,0x00,0x00,0x00,0x00]
    ARROW_W = [0x00,0x00,0x00,0x00,0x18,0x3c,0x7e,0xdb, 0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00]
    TRIANGLE = [0x80,0xc0,0xe0,0xf0,0xf8,0xfc,0xfe,0xff, 0xff,0xfe,0xfc,0xf8,0xf0,0xe0,0xc0,0x80]
    SQUARE = [0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff, 0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00]

    CHAR = {
        'a': [0x00,0x00,0x30,0x4a,0x4a,0x3c,0x40,0x00], 
        'b': [0x00,0x00,0x7e,0x48,0x48,0x30,0x00,0x00], 
        'c': [0x00,0x00,0x38,0x44,0x44,0x44,0x00,0x00], 
        'd': [0x00,0x00,0x30,0x48,0x48,0x7e,0x00,0x00], 
        'e': [0x00,0x00,0x3c,0x4a,0x4a,0x4c,0x00,0x00], 
        'f': [0x00,0x00,0x08,0x7c,0x0a,0x0a,0x00,0x00], 
        'g': [0x00,0x00,0x4c,0x52,0x52,0x3e,0x00,0x00], 
        'h': [0x00,0x00,0x7e,0x08,0x08,0x70,0x00,0x00], 
        'i': [0x00,0x00,0x00,0x7a,0x00,0x00,0x00,0x00], 
        'j': [0x00,0x00,0x20,0x40,0x40,0x3e,0x00,0x00], 
        'k': [0x00,0x00,0x7e,0x18,0x24,0x42,0x00,0x00], 
        'l': [0x00,0x00,0x00,0x7e,0x40,0x40,0x00,0x00], 
        'm': [0x00,0x78,0x04,0x78,0x04,0x78,0x00,0x00], 
        'n': [0x00,0x00,0x7c,0x04,0x04,0x78,0x00,0x00], 
        'o': [0x00,0x00,0x38,0x44,0x44,0x38,0x00,0x00], 
        'p': [0x00,0x00,0x7e,0x12,0x12,0x0c,0x00,0x00], 
        'q': [0x00,0x00,0x0c,0x12,0x12,0x7e,0x00,0x00], 
        'r': [0x00,0x00,0x7c,0x02,0x02,0x04,0x00,0x00], 
        's': [0x00,0x00,0x48,0x54,0x54,0x24,0x00,0x00], 
        't': [0x00,0x00,0x04,0x3e,0x44,0x40,0x00,0x00], 
        'u': [0x00,0x00,0x3c,0x40,0x40,0x7c,0x00,0x00], 
        'v': [0x00,0x00,0x1c,0x20,0x40,0x20,0x1c,0x00], 
        'w': [0x00,0x00,0x3c,0x40,0x30,0x40,0x3c,0x00], 
        'x': [0x00,0x00,0x6c,0x10,0x10,0x6c,0x00,0x00], 
        'y': [0x00,0x00,0x06,0x48,0x48,0x3e,0x00,0x00], 
        'z': [0x00,0x00,0x22,0x52,0x4a,0x46,0x00,0x00], 
        'A': [0x00,0x7c,0x7e,0x13,0x13,0x7e,0x7c,0x00], 
        'B': [0x00,0x7f,0x7f,0x49,0x49,0x7f,0x3e,0x00], 
        'C': [0x00,0x3e,0x7f,0x63,0x63,0x63,0x00,0x00], 
        'D': [0x00,0x7f,0x7f,0x41,0x63,0x3e,0x1c,0x00], 
        'E': [0x00,0x7f,0x7f,0x49,0x49,0x49,0x00,0x00], 
        'F': [0x00,0x7f,0x7f,0x09,0x09,0x09,0x09,0x00], 
        'G': [0x00,0x3e,0x7f,0x41,0x49,0x49,0x3b,0x00], 
        'H': [0x00,0x7f,0x7f,0x08,0x08,0x7f,0x7f,0x00], 
        'I': [0x00,0x00,0x41,0x7f,0x7f,0x41,0x00,0x00], 
        'J': [0x00,0x20,0x40,0x41,0x3f,0x01,0x00,0x00], 
        'K': [0x00,0x7f,0x7f,0x1c,0x36,0x63,0x41,0x00], 
        'L': [0x00,0x7f,0x7f,0x60,0x60,0x60,0x00,0x00], 
        'M': [0x00,0x7f,0x03,0x06,0x06,0x03,0x7f,0x00], 
        'N': [0x00,0x7f,0x7e,0x0c,0x18,0x3f,0x7f,0x00], 
        'O': [0x00,0x3e,0x7f,0x63,0x63,0x7f,0x3e,0x00], 
        'P': [0x00,0x7f,0x71,0x11,0x1f,0x0e,0x00,0x00], 
        'Q': [0x00,0x3e,0x41,0x41,0x51,0x21,0x5e,0x00], 
        'R': [0x00,0x7f,0x7f,0x19,0x39,0x6f,0x46,0x00], 
        'S': [0x00,0x46,0x4f,0x49,0x49,0x79,0x31,0x00], 
        'T': [0x00,0x03,0x03,0x7f,0x7f,0x03,0x03,0x00], 
        'U': [0x00,0x3f,0x7f,0x60,0x60,0x7f,0x3f,0x00], 
        'V': [0x00,0x1f,0x3f,0x60,0x60,0x3f,0x1f,0x00], 
        'W': [0x00,0x3f,0x60,0x10,0x10,0x60,0x3f,0x00], 
        'X': [0x00,0x63,0x36,0x1c,0x1c,0x36,0x63,0x00], 
        'Y': [0x00,0x07,0x0c,0x78,0x78,0x0c,0x07,0x00], 
        'Z': [0x00,0x63,0x73,0x7b,0x6f,0x67,0x63,0x00], 
        '0': [0x00,0x3e,0x63,0x41,0x41,0x63,0x3e,0x00],
        '1': [0x00,0x40,0x42,0x7f,0x7f,0x40,0x40,0x00],
        '2': [0x00,0x62,0x73,0x59,0x49,0x6f,0x66,0x00],
        '3': [0x00,0x22,0x63,0x49,0x49,0x7f,0x36,0x00],
        '4': [0x18,0x1c,0x16,0x53,0x7f,0x7f,0x50,0x00],
        '5': [0x00,0x27,0x67,0x45,0x45,0x7d,0x39,0x00], 
        '6': [0x00,0x3c,0x7e,0x4b,0x49,0x79,0x30,0x00],
        '7': [0x00,0x03,0x03,0x71,0x79,0x0f,0x07,0x00],
        '8': [0x00,0x36,0x7f,0x49,0x49,0x7f,0x36,0x00],
        '9': [0x00,0x06,0x4f,0x49,0x69,0x3f,0x1e,0x00],
        '.': [0x00,0x00,0x00,0x60,0x60,0x00,0x00,0x00],
        '+': [0x00,0x10,0x10,0x7c,0x10,0x10,0x00,0x00],
        '-': [0x00,0x00,0x10,0x10,0x10,0x10,0x00,0x00],
        '*': [0x00,0x2a,0x1c,0x3e,0x1c,0x2a,0x00,0x00],
        '/': [0x00,0x40,0x20,0x10,0x08,0x04,0x02,0x00],
        ' ': [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
        '!': [0x00,0x00,0x00,0x5e,0x00,0x00,0x00,0x00],
        '@': [0x00,0x3e,0x41,0x4d,0x55,0x51,0x5f,0x00],
        '#': [0x14,0x14,0x7f,0x14,0x7f,0x14,0x14,0x00],
        '$': [0x00,0x24,0x2a,0x7f,0x2a,0x12,0x00,0x00],
        '%': [0x00,0x46,0x26,0x10,0x08,0x64,0x62,0x00],
        '^': [0x00,0x00,0x08,0x04,0x02,0x04,0x08,0x00],
        '&': [0x00,0x36,0x49,0x49,0x36,0x20,0x50,0x00],
        '(': [0x00,0x00,0x00,0x3e,0x41,0x00,0x00,0x00],
        ')': [0x00,0x00,0x00,0x41,0x3e,0x00,0x00,0x00],
        '_': [0x00,0x40,0x40,0x40,0x40,0x40,0x40,0x00],
        '=': [0x00,0x00,0x50,0x50,0x50,0x50,0x00,0x00],
        '|': [0x00,0x00,0x00,0x7f,0x00,0x00,0x00,0x00],
        '[': [0x00,0x00,0x7f,0x41,0x41,0x00,0x00,0x00],
        ']': [0x00,0x00,0x00,0x41,0x41,0x7f,0x00,0x00],
        '{': [0x00,0x00,0x08,0x36,0x41,0x00,0x00,0x00],
        '}': [0x00,0x00,0x00,0x41,0x36,0x08,0x00,0x00],
        ':': [0x00,0x00,0x00,0x66,0x66,0x00,0x00,0x00],
        ';': [0x00,0x00,0x00,0x56,0x26,0x00,0x00,0x00],
        ',': [0x00,0x00,0x00,0x48,0x30,0x00,0x00,0x00],
        '<': [0x00,0x00,0x10,0x28,0x44,0x00,0x00,0x00],
        '>': [0x00,0x00,0x00,0x44,0x28,0x10,0x00,0x00], 
        '?': [0x00,0x00,0x02,0xb1,0x09,0x06,0x00,0x00],
        '~': [0x00,0x30,0x08,0x08,0x10,0x20,0x20,0x18],
        '`': [0x00,0x00,0x02,0x04,0x08,0x00,0x00,0x00],
    }

    FULL = [0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff]
    NONE = [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
    PADDING_COL = 0x00 # Một cột rỗng

class LedMatrix:
    def __init__(self, clk, dio):
        dio_pin = machine.Pin(dio)
        clk_pin = machine.Pin(clk)
        self.tm1640 = tm1640.TM1640(clk=clk_pin, dio=dio_pin)
        
    def _scroll_bitmap_animation(self, bitmap_data, direction=0, delay=100):
        """
        Cuộn một bitmap 16x8 pixel qua màn hình.
        bitmap_data: Một list/bytearray 16 byte, mỗi byte đại diện cho một cột.
        direction: 0 cho phải sang trái, 1 cho trái sang phải.
        """
        # Đảm bảo bitmap_data có đúng 16 cột
        if len(bitmap_data) != 16:
            print("Error: Bitmap data must be 16 bytes for full screen scroll.")
            return

        if direction == 0:  # Cuộn từ phải sang trái
            # Cuộn vào từ phải
            for i in range(16):
                display_buffer = bytearray(16)
                # Đưa phần của bitmap vào màn hình
                for j in range(16 - i):
                    display_buffer[j + i] = bitmap_data[j]
                self.tm1640.draw_bitmap(display_buffer)
                time.sleep_ms(delay)
            
            # Cuộn ra sang trái
            for i in range(16):
                display_buffer = bytearray(16)
                for j in range(16 - i):
                    display_buffer[j] = bitmap_data[j + i]
                self.tm1640.draw_bitmap(display_buffer)
                time.sleep_ms(delay)
        else:  # Cuộn từ trái sang phải
            # Cuộn vào từ trái
            for i in range(16):
                display_buffer = bytearray(16)
                for j in range(i + 1):
                    display_buffer[j] = bitmap_data[15 - i + j]
                self.tm1640.draw_bitmap(display_buffer)
                time.sleep_ms(delay)
            
            # Cuộn ra sang phải
            for i in range(16):
                display_buffer = bytearray(16)
                for j in range(16 - i):
                    display_buffer[j + i] = bitmap_data[j]
                self.tm1640.draw_bitmap(display_buffer)
                time.sleep_ms(delay)

    def _show_static_text(self, text_str):
        self.tm1640.clear()
        if len(text_str) == 1:
            if text_str[0] in Image.CHAR:
                # Căn giữa ký tự 8x8 trên ma trận 16 cột
                self.tm1640.draw_char(Image.CHAR[text_str[0]], pos=4) 
        elif len(text_str) == 2:
            if text_str[0] in Image.CHAR and text_str[1] in Image.CHAR:
                full_char_data = bytearray(16)
                char1_data = Image.CHAR[text_str[0]]
                char2_data = Image.CHAR[text_str[1]]
                
                for i in range(8):
                    full_char_data[i] = char1_data[i]
                    full_char_data[i+8] = char2_data[i]
                
                self.tm1640.draw_bitmap(full_char_data)
        else:
            # Nếu có nhiều hơn 2 ký tự, thì cuộn chúng
            self.scroll(text_str)

    def scroll(self, input_data, direction=0, delay=100):
        """
        Cuộn văn bản hoặc một bitmap.
        input_data: Chuỗi văn bản hoặc list/bytearray 16 byte bitmap.
        direction: 0 cho phải sang trái (mặc định), 1 cho trái sang phải.
        delay: Độ trễ giữa các khung hình (miliseconds).
        """
        if isinstance(input_data, list) or isinstance(input_data, bytearray):
            # Nếu là bitmap (list of bytes), sử dụng animation cuộn ảnh
            self._scroll_bitmap_animation(input_data, direction, delay)
        elif isinstance(input_data, str):
            # Nếu là chuỗi, chuẩn bị dữ liệu cuộn
            output_str = str(input_data)  
            
            # Tạo một buffer đủ lớn để chứa toàn bộ chuỗi cộng với đệm
            # 16 cột đệm ở mỗi bên để cuộn vào và ra hoàn chỉnh
            padding_cols = 16 
            total_cols_needed = len(output_str) * 8 + 2 * padding_cols
            
            # Khởi tạo buffer cuộn với các cột trống
            full_scroll_buffer = bytearray(total_cols_needed)

            # Điền dữ liệu ký tự vào buffer cuộn sau phần đệm bên trái
            current_pos = padding_cols
            for char_val in output_str:
                if char_val in Image.CHAR:
                    char_bitmap = Image.CHAR[char_val]
                    for i in range(8):
                        full_scroll_buffer[current_pos + i] = char_bitmap[i]
                    current_pos += 8
                else:
                    # Xử lý ký tự không xác định nếu cần, ví dụ: thêm khoảng trắng
                    for i in range(8):
                        full_scroll_buffer[current_pos + i] = Image.CHAR[' '][i]
                    current_pos += 8

            # Cuộn qua buffer
            if direction == 0: # Cuộn từ phải sang trái
                # Bắt đầu hiển thị từ cuối chuỗi đệm
                for i in range(total_cols_needed - 16): 
                    display_segment = full_scroll_buffer[i : i + 16]
                    self.tm1640.draw_bitmap(display_segment)
                    time.sleep_ms(delay)
            else: # Cuộn từ trái sang phải
                # Bắt đầu hiển thị từ đầu chuỗi cuộn, di chuyển về phía đầu
                for i in range(total_cols_needed - 16, -1, -1):
                    display_segment = full_scroll_buffer[i : i + 16]
                    self.tm1640.draw_bitmap(display_segment)
                    time.sleep_ms(delay)
            
            self.tm1640.clear() # Xóa ma trận sau khi cuộn

    def show(self, input_data):
        """
        Hiển thị một bitmap hoặc văn bản tĩnh.
        input_data: list/bytearray 16 byte (cho bitmap) hoặc chuỗi văn bản.
        """
        if isinstance(input_data, list) or isinstance(input_data, bytearray):
            # Giả định input_data là 16 byte bitmap cho ma trận 16 cột
            if len(input_data) == 16:
                self.tm1640.draw_bitmap(input_data)
            else:
                print("Error: Bitmap list must be 16 bytes long.")
        elif isinstance(input_data, str):
            self._show_static_text(input_data)
        else:
            print("Error: Invalid input type for show. Must be list/bytearray or string.")

    def clear(self):
        self.tm1640.clear()

    def scan_leds(self, delay=50):
        """
        Quét từng đèn LED trên ma trận để kiểm tra hoạt động.
        """
        self.clear()
        for row in range(8):
            for col in range(16):
                self.tm1640.set_pixel(row, col, 1) # Bật pixel (hàng, cột)
                self.tm1640.show() # Hiển thị thay đổi
                time.sleep_ms(delay)
                self.tm1640.set_pixel(row, col, 0) # Tắt pixel
        self.clear()
    
    def test_individual_led(self, row, col, duration=500):
        """
        Bật một đèn LED cụ thể tại vị trí (hàng, cột).
        row: Hàng của đèn LED (0-7)
        col: Cột của đèn LED (0-15)
        duration: Thời gian đèn LED sáng (miliseconds)
        """
        if not (0 <= row <= 7 and 0 <= col <= 15):
            print("Lỗi: Vị trí hàng hoặc cột không hợp lệ.")
            return

        self.clear()
        self.tm1640.set_pixel(row, col, 1) # Bật pixel (hàng, cột)
        self.tm1640.show() # Hiển thị
        time.sleep_ms(duration)
        self.clear() # Tắt đèn LED sau khi kiểm tra
